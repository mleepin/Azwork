{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "Updateddim"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "fctd"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "flowlet1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Table as string (\"dimemployee\"),",
				"     Columns as string (\"Name,Dept,Role\"),",
				"     PrimaryKey as string (\"PK\")",
				"}",
				"source(output(",
				"          PK as string,",
				"          Name as string,",
				"          Dept as string,",
				"          Role as string,",
				"          From as date,",
				"          End as date,",
				"          Currentflag as boolean,",
				"          SID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Updateddim",
				"source(output(",
				"          FK_emp as string,",
				"          Quantity_Sold as double,",
				"          Date as date 'dd/MM/yyyy'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> fctd",
				"Updateddim select(mapColumn(",
				"          PK,",
				"          Name,",
				"          Dept,",
				"          Role,",
				"          From,",
				"          End,",
				"          Currentflag,",
				"          SID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 alterRow(updateIf(true())) ~> alterRow2",
				"fctd derive(Datei = toString(Date, \"ddMMyyyy\")) ~> derivedColumn3",
				"derivedColumn3, Updateddim lookup(FK_emp == PK",
				"     && Date >= From",
				"     && Date <= End,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'right')~> lookup1",
				"lookup1 compose(composition: 'undefined') ~> flowlet1@()"
			]
		}
	}
}